{"version":3,"file":"main.27bfd38d5a7890619e8a.bundle.js","sources":["webpack:///./stories/DayPickerSingleDateController.js"],"sourcesContent":["import React from 'react';\nimport moment from 'moment';\nimport { storiesOf } from '@storybook/react';\nimport { action } from '@storybook/addon-actions';\nimport { withInfo } from '@storybook/addon-info';\n\nimport InfoPanelDecorator, { monospace } from './InfoPanelDecorator';\n\nimport isSameDay from '../src/utils/isSameDay';\nimport isInclusivelyAfterDay from '../src/utils/isInclusivelyAfterDay';\nimport CustomizableCalendarDay, { defaultStyles, selectedStyles } from '../src/components/CustomizableCalendarDay';\n\nimport { VERTICAL_ORIENTATION } from '../src/constants';\n\nimport DayPickerSingleDateControllerWrapper from '../examples/DayPickerSingleDateControllerWrapper';\n\nconst dayPickerSingleDateControllerInfo = `The ${monospace('DayPickerSingleDateController')} component is a\n  fully controlled version of the ${monospace('DayPicker')} that has built-in rules for selecting a\n  single date. Unlike the ${monospace('DayPicker')}, which requires the consumer to explicitly define\n  ${monospace('onDayMouseEnter')}, ${monospace('onDayMouseLeave')}, and ${monospace('onDayClick')}\n  handlers, the consumer needs simply to maintain the ${monospace('focused')} and\n  ${monospace('date')} values in state and then pass these down as props along with\n  ${monospace('onFocusChange')} and ${monospace('onDateChange')} callbacks that\n  update them appropriately. You can see an example of this implementation <a href=\n  \"https://github.com/airbnb/react-dates/blob/master/examples/DayPickerSingleDateControllerWrapper.jsx\">\n  here</a>. <br/><br/>\n  Note that the ${monospace('focused')} prop may be ${monospace('false')}, but if this is the\n  case, dates are not selectable. As a result, in the example wrapper, we always force\n  ${monospace('focused')} to be true in the ${monospace('onFocusChange')} method. <br/><br/>\n  The ${monospace('DayPickerSingleDateController')} is particularly useful if you are interested in the\n  ${monospace('SingleDatePicker')} functionality and calendar presentation, but would like to\n  implement your own input.`;\n\nconst TestPrevIcon = () => (\n  <span\n    style={{\n      border: '1px solid #dce0e0',\n      backgroundColor: '#fff',\n      color: '#484848',\n      padding: '3px',\n    }}\n  >\n    Prev\n  </span>\n);\n\nconst TestNextIcon = () => (\n  <span\n    style={{\n      border: '1px solid #dce0e0',\n      backgroundColor: '#fff',\n      color: '#484848',\n      padding: '3px',\n    }}\n  >\n    Next\n  </span>\n);\n\nconst TestCustomInfoPanel = () => (\n  <div\n    style={{\n      padding: '10px 21px',\n      borderTop: '1px solid #dce0e0',\n      color: '#484848',\n    }}\n  >\n    &#x2755; Some useful info here\n  </div>\n);\n\nconst datesList = [\n  moment(),\n  moment().add(1, 'days'),\n  moment().add(3, 'days'),\n  moment().add(9, 'days'),\n  moment().add(10, 'days'),\n  moment().add(11, 'days'),\n  moment().add(12, 'days'),\n  moment().add(13, 'days'),\n];\n\nstoriesOf('DayPickerSingleDateController', module)\n  .addDecorator(InfoPanelDecorator(dayPickerSingleDateControllerInfo))\n  .add('default', withInfo()(() => (\n    <DayPickerSingleDateControllerWrapper\n      onOutsideClick={action('DayPickerSingleDateController::onOutsideClick')}\n      onPrevMonthClick={action('DayPickerSingleDateController::onPrevMonthClick')}\n      onNextMonthClick={action('DayPickerSingleDateController::onNextMonthClick')}\n    />\n  )))\n  .add('with custom input', withInfo()(() => (\n    <DayPickerSingleDateControllerWrapper\n      onOutsideClick={action('DayPickerSingleDateController::onOutsideClick')}\n      onPrevMonthClick={action('DayPickerSingleDateController::onPrevMonthClick')}\n      onNextMonthClick={action('DayPickerSingleDateController::onNextMonthClick')}\n      showInput\n    />\n  )))\n  .add('non-english locale', withInfo()(() => {\n    moment.locale('zh-cn');\n    return (\n      <DayPickerSingleDateControllerWrapper\n        onOutsideClick={action('DayPickerSingleDateController::onOutsideClick')}\n        onPrevMonthClick={action('DayPickerSingleDateController::onPrevMonthClick')}\n        onNextMonthClick={action('DayPickerSingleDateController::onNextMonthClick')}\n        monthFormat=\"YYYY[å¹´]MMMM\"\n      />\n    );\n  }))\n  .add('single month', withInfo()(() => (\n    <DayPickerSingleDateControllerWrapper\n      onOutsideClick={action('DayPickerSingleDateController::onOutsideClick')}\n      onPrevMonthClick={action('DayPickerSingleDateController::onPrevMonthClick')}\n      onNextMonthClick={action('DayPickerSingleDateController::onNextMonthClick')}\n      numberOfMonths={1}\n    />\n  )))\n  .add('single month, custom caption', withInfo()(() => (\n    <DayPickerSingleDateControllerWrapper\n      onOutsideClick={action('DayPickerSingleDateController::onOutsideClick')}\n      onPrevMonthClick={action('DayPickerSingleDateController::onPrevMonthClick')}\n      onNextMonthClick={action('DayPickerSingleDateController::onNextMonthClick')}\n      numberOfMonths={1}\n      renderMonthElement={({ month, onMonthSelect, onYearSelect }) => (\n        <div style={{ display: 'flex', justifyContent: 'center' }}>\n          <div>\n            <select\n              value={month.month()}\n              onChange={(e) => { onMonthSelect(month, e.target.value); }}\n            >\n              {moment.months().map((label, value) => (\n                <option value={value}>{label}</option>\n              ))}\n            </select>\n          </div>\n          <div>\n            <select\n              value={month.year()}\n              onChange={(e) => { onYearSelect(month, e.target.value); }}\n            >\n              <option value={moment().year() - 1}>Last year</option>\n              <option value={moment().year()}>{moment().year()}</option>\n              <option value={moment().year() + 1}>Next year</option>\n            </select>\n          </div>\n        </div>\n      )}\n    />\n  )))\n  .add('3 months', withInfo()(() => (\n    <DayPickerSingleDateControllerWrapper\n      onOutsideClick={action('DayPickerSingleDateController::onOutsideClick')}\n      onPrevMonthClick={action('DayPickerSingleDateController::onPrevMonthClick')}\n      onNextMonthClick={action('DayPickerSingleDateController::onNextMonthClick')}\n      numberOfMonths={3}\n    />\n  )))\n  .add('vertical', withInfo()(() => (\n    <DayPickerSingleDateControllerWrapper\n      onOutsideClick={action('DayPickerSingleDateController::onOutsideClick')}\n      onPrevMonthClick={action('DayPickerSingleDateController::onPrevMonthClick')}\n      onNextMonthClick={action('DayPickerSingleDateController::onNextMonthClick')}\n      orientation={VERTICAL_ORIENTATION}\n    />\n  )))\n  .add('with custom month navigation', withInfo()(() => (\n    <DayPickerSingleDateControllerWrapper\n      onOutsideClick={action('DayPickerSingleDateController::onOutsideClick')}\n      onPrevMonthClick={action('DayPickerSingleDateController::onPrevMonthClick')}\n      onNextMonthClick={action('DayPickerSingleDateController::onNextMonthClick')}\n      navPrev={<TestPrevIcon />}\n      navNext={<TestNextIcon />}\n    />\n  )))\n  .add('with outside days enabled', withInfo()(() => (\n    <DayPickerSingleDateControllerWrapper\n      onOutsideClick={action('DayPickerSingleDateController::onOutsideClick')}\n      onPrevMonthClick={action('DayPickerSingleDateController::onPrevMonthClick')}\n      onNextMonthClick={action('DayPickerSingleDateController::onNextMonthClick')}\n      numberOfMonths={1}\n      enableOutsideDays\n    />\n  )))\n  .add('with month specified on open', withInfo()(() => (\n    <DayPickerSingleDateControllerWrapper\n      onOutsideClick={action('DayPickerSingleDateController::onOutsideClick')}\n      onPrevMonthClick={action('DayPickerSingleDateController::onPrevMonthClick')}\n      onNextMonthClick={action('DayPickerSingleDateController::onNextMonthClick')}\n      initialVisibleMonth={() => moment().add(10, 'months')}\n    />\n  )))\n  .add('allows all days, including past days', withInfo()(() => (\n    <DayPickerSingleDateControllerWrapper\n      onOutsideClick={action('DayPickerSingleDateController::onOutsideClick')}\n      onPrevMonthClick={action('DayPickerSingleDateController::onPrevMonthClick')}\n      onNextMonthClick={action('DayPickerSingleDateController::onNextMonthClick')}\n      isOutsideRange={() => false}\n    />\n  )))\n  .add('allows next two weeks only', withInfo()(() => (\n    <DayPickerSingleDateControllerWrapper\n      onOutsideClick={action('DayPickerSingleDateController::onOutsideClick')}\n      onPrevMonthClick={action('DayPickerSingleDateController::onPrevMonthClick')}\n      onNextMonthClick={action('DayPickerSingleDateController::onNextMonthClick')}\n      isOutsideRange={day =>\n        !isInclusivelyAfterDay(day, moment()) ||\n        isInclusivelyAfterDay(day, moment().add(2, 'weeks'))\n      }\n    />\n  )))\n  .add('with some blocked dates', withInfo()(() => (\n    <DayPickerSingleDateControllerWrapper\n      onOutsideClick={action('DayPickerSingleDateController::onOutsideClick')}\n      onPrevMonthClick={action('DayPickerSingleDateController::onPrevMonthClick')}\n      onNextMonthClick={action('DayPickerSingleDateController::onNextMonthClick')}\n      isDayBlocked={day1 => datesList.some(day2 => isSameDay(day1, day2))}\n    />\n  )))\n  .add('with some highlighted dates', withInfo()(() => (\n    <DayPickerSingleDateControllerWrapper\n      onOutsideClick={action('DayPickerSingleDateController::onOutsideClick')}\n      onPrevMonthClick={action('DayPickerSingleDateController::onPrevMonthClick')}\n      onNextMonthClick={action('DayPickerSingleDateController::onNextMonthClick')}\n      isDayHighlighted={day1 => datesList.some(day2 => isSameDay(day1, day2))}\n    />\n  )))\n  .add('blocks fridays', withInfo()(() => (\n    <DayPickerSingleDateControllerWrapper\n      onOutsideClick={action('DayPickerSingleDateController::onOutsideClick')}\n      onPrevMonthClick={action('DayPickerSingleDateController::onPrevMonthClick')}\n      onNextMonthClick={action('DayPickerSingleDateController::onNextMonthClick')}\n      isDayBlocked={day => moment.weekdays(day.weekday()) === 'Friday'}\n    />\n  )))\n  .add('with custom daily details', withInfo()(() => (\n    <DayPickerSingleDateControllerWrapper\n      onOutsideClick={action('DayPickerSingleDateController::onOutsideClick')}\n      onPrevMonthClick={action('DayPickerSingleDateController::onPrevMonthClick')}\n      onNextMonthClick={action('DayPickerSingleDateController::onNextMonthClick')}\n      renderDayContents={day => day.format('ddd')}\n    />\n  )))\n  .add('with custom day styles', withInfo()(() => {\n    const customDayStyles = {\n      // extend and update styles with es6 spread operators\n      defaultStyles: {\n        ...defaultStyles,\n        color: 'blue',\n        hover: {\n          ...defaultStyles.hover,\n          color: 'blue',\n        },\n      },\n    };\n    return (\n      <DayPickerSingleDateControllerWrapper\n        onOutsideClick={action('DayPickerSingleDateController::onOutsideClick')}\n        onPrevMonthClick={action('DayPickerSingleDateController::onPrevMonthClick')}\n        onNextMonthClick={action('DayPickerSingleDateController::onNextMonthClick')}\n        renderCalendarDay={props => (\n          <CustomizableCalendarDay\n            {...props}\n            {...customDayStyles}\n          />\n        )}\n      />\n    );\n  }))\n  .add('with info panel', withInfo()(() => (\n    <DayPickerSingleDateControllerWrapper\n      onOutsideClick={action('DayPickerSingleDateController::onOutsideClick')}\n      onPrevMonthClick={action('DayPickerSingleDateController::onPrevMonthClick')}\n      onNextMonthClick={action('DayPickerSingleDateController::onNextMonthClick')}\n      renderCalendarInfo={() => (\n        <TestCustomInfoPanel />\n      )}\n    />\n  )))\n  .add('with no animation', withInfo()(() => (\n    <DayPickerSingleDateControllerWrapper\n      onOutsideClick={action('DayPickerSingleDateController::onOutsideClick')}\n      onPrevMonthClick={action('DayPickerSingleDateController::onPrevMonthClick')}\n      onNextMonthClick={action('DayPickerSingleDateController::onNextMonthClick')}\n      transitionDuration={0}\n    />\n  )))\n  .add('with vertical spacing applied', withInfo()(() => (\n    <DayPickerSingleDateControllerWrapper\n      onOutsideClick={action('DayPickerSingleDateController::onOutsideClick')}\n      onPrevMonthClick={action('DayPickerSingleDateController::onPrevMonthClick')}\n      onNextMonthClick={action('DayPickerSingleDateController::onNextMonthClick')}\n      verticalBorderSpacing={16}\n    />\n  )));\n"],"mappings":"AAgBA","sourceRoot":""}